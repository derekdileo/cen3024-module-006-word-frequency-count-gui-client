package application;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;

import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;

/** Application scrapes website to a file and prints a 
 * list of top 10 word occurrences to a JavaFX GUI.
 * @author derekdileo */
public class Main extends Application {
	
	// QuestionBox variables
	protected static boolean defaultSite = false;
	protected static String userWebsite = null;
	protected static String sourceHead = null;
	protected static String sourceEnd = null;
	private String defaultWebsite =  "https://www.gutenberg.org/files/1065/1065-h/1065-h.htm";
	private String defaultSourceHead = "<h1>The Raven</h1>";
	private String defaultSourceEnd = "<!--end chapter-->";
	private String sitePrompt = "Please enter a website to evaluate";
	private String startPrompt = "Please paste some text from the first line of text to be evaluated.";
	private String endPrompt = "Please paste some text from the last line of text to be evaluated.";
	
	
	// Local Lists and Maps to hold return values from Class methods
	private HashMap<String, Integer> wordFrequencyHashMap = new HashMap<String, Integer>();
	protected static ArrayList<Word> wordsArrayList = new ArrayList<Word>();
	
	// Varibles used to show / hide text on GUI
	//private boolean displayTopTen = false; 
	protected StringBuilder sbTen;
	protected StringBuilder sbAll;
	protected static String sbTenString;
	protected static String sbAllString;
	
	/** Main method calls WebScrapeToFile and launch() to start JavaFX GUI.
	 * @param args mandatory parameters for command line method call */
	public static void main(String[] args) {
		
		// Launch JavaFX GUI 
		launch();
	}
	
	// Declare stage (window) outside of start() method
	// so it is accessible to closeProgram() method
	static Stage window;
	
	/** start() launches the GUI */
	@Override
	public void start(Stage primaryStage) {
		
		// Get user input for website, startLine & endLine...
		// Or set to default values
		userWebsite = QuestionBox.display("Website to Process?", sitePrompt, defaultWebsite);
		if (userWebsite == defaultWebsite) {
			defaultSite = true;
			System.out.println("Default Website Chosen. Release the Raven!");
		}
		sourceHead = QuestionBox.display("Start of Processing?", startPrompt, defaultSourceHead);
		sourceEnd = QuestionBox.display("End of Processing?", endPrompt, defaultSourceEnd);
		
		// HashMap created from text file generated by WebScrapeToFile
		// with Key=word and value=frequency 
		wordFrequencyHashMap = WebScrape.parseSite(Main.userWebsite, Main.sourceHead, Main.sourceEnd);
		
		// Process HashMap<String,Int> and return ArrayList<Word> to be sorted
		wordsArrayList = WordFrequencyAnalyzer.processHashMap(wordFrequencyHashMap);
		
		// Sort wordsArrayList by frequency
		Collections.sort(wordsArrayList);

		// Reverse for highest frequency first
		Collections.reverse(wordsArrayList);
		
		// New versions of Java do not add the word "" to the list. However, Java version 1.8 does
		// This "" occurs 73 times and, therefore, appears at the top of the words list.
		// I tried for hours to fix it, but in the end, I had to bandaid with this. 
		wordsArrayList.remove(0);
		
		processText();
		
		// Rename stage to window for sanity
		window = primaryStage;
		
		// Set stage title
		window.setTitle("Word Frequency Analyzer");
		
		// Handle close button request. 
		// Launch ConfirmBox to confirm if user wishes to quit
		window.setOnCloseRequest(e -> {
			// Consume the event to allow closeProgram() to do its job
			e.consume();
			closeProgram();
		});
		
		try {
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("Main.fxml"));
			Scene scene = new Scene(root,800,600);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			window.setScene(scene);
			window.show();
		} catch(Exception e) {
			e.printStackTrace();
		}
		
	}
	
	/**
	 * Method prints all results to console and pushes top ten to GUI.
	 * @author Derek DiLeo */
	protected void processText() {

		ArrayList<Word> wordsArrayList = Main.wordsArrayList;
		// Build a string of top 10 results to push to Main.fxml GUI
		sbTen = new StringBuilder();
		sbTen.append("Top Ten Results\n\n");
		
		for (int index = 0; index < 10; index++) {
			sbTen.append(wordsArrayList.get(index).toString(index) + "\n");
		}
		
		// Save top 10 results to String variable which 
		//is then called from MainController to push to GUI
		sbTenString = sbTen.toString();
		
		// Build a string of all results to push to AllResults.fxml GUI
		sbAll = new StringBuilder();
		sbAll.append("All Results\n\n");
		
		// Print all results to console and append all results to sbAll
		System.out.println("\nSorted:");

		for (Word word : wordsArrayList) {
			
			// Get value of index location to pass into Word.toString(int index)
			int index = wordsArrayList.indexOf(word);
			
			// Print each Word in wordsArrayListWords
			System.out.println(wordsArrayList.get(index).toString(index));
			
			// Append word to String Builder to be pushed to GUI (via AllResults.fxml)
			sbAll.append(wordsArrayList.get(index).toString(index) + "\n");
	
		}
		// Save all results to String variable which is then
		// called from AllResultsController to push to GUI
		sbAllString = sbAll.toString();
	}
	
	/** Method uses ConfirmBox class to confirm if user wants to quit
	 *  and if true, deletes scrape.txt (if exists). */
	protected static void closeProgram() {
       // Ask if user wants to exit
       Boolean answer = ConfirmBox.display("", "Are you sure you want to quit?");
       if (answer) {
           // Run any necessary code before window closes:
           System.out.println("Window Closed!");
           window.close();
       }
	}
}
